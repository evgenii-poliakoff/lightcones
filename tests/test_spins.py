import numpy as np
import pytest
import lightcones.space as sp

tol = 1e-10

def test_spins():
    
    # exception throwing
    
    s = sp.states(3, bounding_condition=sp.bounding_condition.more_than_n_occupied(2))
    with pytest.raises(ValueError) as exc_info:
        f = sp.spins(1/2, s)
    assert str(exc_info.value) == "Using more than 2j occupied states to construct spin j operators"
    
    #
    j = 3
    s = sp.states(2, bounding_condition=sp.bounding_condition.more_than_n_occupied(2 * j))
    q = sp.spins(j, s)
    
    # vac
    vac = q.vac()
    expected = np.zeros(49, dtype = complex)
    expected[0] = 1.0
    assert np.allclose(vac, expected, atol=tol), \
        f"vac"
        
    # eye
    
    m = q.eye
    data = [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]
    indices = [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48]
    indptr = [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]
    
    assert np.allclose(m.data, data, atol=tol), \
        f"data for eye"
    assert np.array_equal(m.indices, indices), \
        f"indices for eye"
    assert np.array_equal(m.indptr, indptr), \
        f"indptr for eye"
        
    # zero
    
    m = q.zero
    data = []
    indices = []
    indptr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0]
    
    assert np.allclose(m.data, data, atol=tol), \
        f"data for zero"
    assert np.array_equal(m.indices, indices), \
        f"indices for zero"
    assert np.array_equal(m.indptr, indptr), \
        f"indptr for zero"
    
    # j_m[0] 
    m1 = q.j_m[0]
    
    data = [2.44948974278+0.j, 2.44948974278+0.j, 2.44948974278+0.j, \
       2.44948974278+0.j, 2.44948974278+0.j, 2.44948974278+0.j, \
       2.44948974278+0.j, 3.16227766017+0.j, 3.16227766017+0.j, \
       3.16227766017+0.j, 3.16227766017+0.j, 3.16227766017+0.j, \
       3.16227766017+0.j, 3.16227766017+0.j, 3.46410161514+0.j, \
       3.46410161514+0.j, 3.46410161514+0.j, 3.46410161514+0.j, \
       3.46410161514+0.j, 3.46410161514+0.j, 3.46410161514+0.j, \
       3.46410161514+0.j, 3.46410161514+0.j, 3.46410161514+0.j, \
       3.46410161514+0.j, 3.46410161514+0.j, 3.46410161514+0.j, \
       3.46410161514+0.j, 3.16227766017+0.j, 3.16227766017+0.j, \
       3.16227766017+0.j, 3.16227766017+0.j, 3.16227766017+0.j, \
       3.16227766017+0.j, 3.16227766017+0.j, 2.44948974278+0.j, \
       2.44948974278+0.j, 2.44948974278+0.j, 2.44948974278+0.j, \
       2.44948974278+0.j, 2.44948974278+0.j, 2.44948974278+0.j]
    indices = [0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, \
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, \
       34, 35, 36, 37, 38, 39, 40, 41]
    indptr = [0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, \
       10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, \
       27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]
    
    assert np.allclose(m1.data, data, atol=tol), \
        f"data for j_m[0]"
    assert np.array_equal(m1.indices, indices), \
        f"indices for j_m[0]"
    assert np.array_equal(m1.indptr, indptr), \
        f"indptr for j_m[0]"

    # j_m[1]
    
    m2 = q.j_m[1]
    
    data = [2.44948974+0.j, 3.16227766+0.j, 3.46410162+0.j, 3.46410162+0.j,
       3.16227766+0.j, 2.44948974+0.j, 2.44948974+0.j, 3.16227766+0.j,
       3.46410162+0.j, 3.46410162+0.j, 3.16227766+0.j, 2.44948974+0.j,
       2.44948974+0.j, 3.16227766+0.j, 3.46410162+0.j, 3.46410162+0.j,
       3.16227766+0.j, 2.44948974+0.j, 2.44948974+0.j, 3.16227766+0.j,
       3.46410162+0.j, 3.46410162+0.j, 3.16227766+0.j, 2.44948974+0.j,
       2.44948974+0.j, 3.16227766+0.j, 3.46410162+0.j, 3.46410162+0.j,
       3.16227766+0.j, 2.44948974+0.j, 2.44948974+0.j, 3.16227766+0.j,
       3.46410162+0.j, 3.46410162+0.j, 3.16227766+0.j, 2.44948974+0.j,
       2.44948974+0.j, 3.16227766+0.j, 3.46410162+0.j, 3.46410162+0.j,
       3.16227766+0.j, 2.44948974+0.j]
    indices = [ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11, 12, 14, 15, 16, 17, 18,
       19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38,
       39, 40, 42, 43, 44, 45, 46, 47]
    indptr = [ 0,  0,  1,  2,  3,  4,  5,  6,  6,  7,  8,  9, 10, 11, 12, 12, 13,
       14, 15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 28,
       29, 30, 30, 31, 32, 33, 34, 35, 36, 36, 37, 38, 39, 40, 41, 42]
    
    assert np.allclose(m2.data, data, atol=tol), \
        f"data for j_m[1]"
    assert np.array_equal(m2.indices, indices), \
        f"indices for j_m[1]"
    assert np.array_equal(m2.indptr, indptr), \
        f"indptr for j_m[1]"
        
    # j_p[0]
    
    m1 = q.j_p[0]
    
    data = [2.44948974+0.j, 2.44948974+0.j, 2.44948974+0.j, 2.44948974+0.j,
       2.44948974+0.j, 2.44948974+0.j, 2.44948974+0.j, 3.16227766+0.j,
       3.16227766+0.j, 3.16227766+0.j, 3.16227766+0.j, 3.16227766+0.j,
       3.16227766+0.j, 3.16227766+0.j, 3.46410162+0.j, 3.46410162+0.j,
       3.46410162+0.j, 3.46410162+0.j, 3.46410162+0.j, 3.46410162+0.j,
       3.46410162+0.j, 3.46410162+0.j, 3.46410162+0.j, 3.46410162+0.j,
       3.46410162+0.j, 3.46410162+0.j, 3.46410162+0.j, 3.46410162+0.j,
       3.16227766+0.j, 3.16227766+0.j, 3.16227766+0.j, 3.16227766+0.j,
       3.16227766+0.j, 3.16227766+0.j, 3.16227766+0.j, 2.44948974+0.j,
       2.44948974+0.j, 2.44948974+0.j, 2.44948974+0.j, 2.44948974+0.j,
       2.44948974+0.j, 2.44948974+0.j]
    indices = [ 7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
       24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
       41, 42, 43, 44, 45, 46, 47, 48]
    indptr = [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 42, 42, 42, 42, 42, 42, 42]
    
    assert np.allclose(m1.data, data, atol=tol), \
        f"data for j_p[0]"
    assert np.array_equal(m1.indices, indices), \
        f"indices for j_p[0]"
    assert np.array_equal(m1.indptr, indptr), \
        f"indptr for j_p[0]"
        
    # j_p[1]
    
    m2 = q.j_p[1]
    
    data = [2.44948974+0.j, 3.16227766+0.j, 3.46410162+0.j, 3.46410162+0.j,
       3.16227766+0.j, 2.44948974+0.j, 2.44948974+0.j, 3.16227766+0.j,
       3.46410162+0.j, 3.46410162+0.j, 3.16227766+0.j, 2.44948974+0.j,
       2.44948974+0.j, 3.16227766+0.j, 3.46410162+0.j, 3.46410162+0.j,
       3.16227766+0.j, 2.44948974+0.j, 2.44948974+0.j, 3.16227766+0.j,
       3.46410162+0.j, 3.46410162+0.j, 3.16227766+0.j, 2.44948974+0.j,
       2.44948974+0.j, 3.16227766+0.j, 3.46410162+0.j, 3.46410162+0.j,
       3.16227766+0.j, 2.44948974+0.j, 2.44948974+0.j, 3.16227766+0.j,
       3.46410162+0.j, 3.46410162+0.j, 3.16227766+0.j, 2.44948974+0.j,
       2.44948974+0.j, 3.16227766+0.j, 3.46410162+0.j, 3.46410162+0.j,
       3.16227766+0.j, 2.44948974+0.j]
    indices = [ 1,  2,  3,  4,  5,  6,  8,  9, 10, 11, 12, 13, 15, 16, 17, 18, 19,
       20, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39,
       40, 41, 43, 44, 45, 46, 47, 48]
    indptr = [ 0,  1,  2,  3,  4,  5,  6,  6,  7,  8,  9, 10, 11, 12, 12, 13, 14,
       15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29,
       30, 30, 31, 32, 33, 34, 35, 36, 36, 37, 38, 39, 40, 41, 42, 42]
    
    assert np.allclose(m2.data, data, atol=tol), \
        f"data for j_p[1]"
    assert np.array_equal(m2.indices, indices), \
        f"indices for j_p[1]"
    assert np.array_equal(m2.indptr, indptr), \
        f"indptr for j_p[1]"
        
    # j_x[0]
    
    m1 = q.j_x[0]
    
    data = [1.22474487+0.j, 1.22474487+0.j, 1.22474487+0.j, 1.22474487+0.j,
       1.22474487+0.j, 1.22474487+0.j, 1.22474487+0.j, 1.22474487+0.j,
       1.58113883+0.j, 1.22474487+0.j, 1.58113883+0.j, 1.22474487+0.j,
       1.58113883+0.j, 1.22474487+0.j, 1.58113883+0.j, 1.22474487+0.j,
       1.58113883+0.j, 1.22474487+0.j, 1.58113883+0.j, 1.22474487+0.j,
       1.58113883+0.j, 1.58113883+0.j, 1.73205081+0.j, 1.58113883+0.j,
       1.73205081+0.j, 1.58113883+0.j, 1.73205081+0.j, 1.58113883+0.j,
       1.73205081+0.j, 1.58113883+0.j, 1.73205081+0.j, 1.58113883+0.j,
       1.73205081+0.j, 1.58113883+0.j, 1.73205081+0.j, 1.73205081+0.j,
       1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j,
       1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j,
       1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j,
       1.73205081+0.j, 1.73205081+0.j, 1.58113883+0.j, 1.73205081+0.j,
       1.58113883+0.j, 1.73205081+0.j, 1.58113883+0.j, 1.73205081+0.j,
       1.58113883+0.j, 1.73205081+0.j, 1.58113883+0.j, 1.73205081+0.j,
       1.58113883+0.j, 1.73205081+0.j, 1.58113883+0.j, 1.58113883+0.j,
       1.22474487+0.j, 1.58113883+0.j, 1.22474487+0.j, 1.58113883+0.j,
       1.22474487+0.j, 1.58113883+0.j, 1.22474487+0.j, 1.58113883+0.j,
       1.22474487+0.j, 1.58113883+0.j, 1.22474487+0.j, 1.58113883+0.j,
       1.22474487+0.j, 1.22474487+0.j, 1.22474487+0.j, 1.22474487+0.j,
       1.22474487+0.j, 1.22474487+0.j, 1.22474487+0.j, 1.22474487+0.j]
    indices = [ 7,  8,  9, 10, 11, 12, 13,  0, 14,  1, 15,  2, 16,  3, 17,  4, 18,
        5, 19,  6, 20,  7, 21,  8, 22,  9, 23, 10, 24, 11, 25, 12, 26, 13,
       27, 14, 28, 15, 29, 16, 30, 17, 31, 18, 32, 19, 33, 20, 34, 21, 35,
       22, 36, 23, 37, 24, 38, 25, 39, 26, 40, 27, 41, 28, 42, 29, 43, 30,
       44, 31, 45, 32, 46, 33, 47, 34, 48, 35, 36, 37, 38, 39, 40, 41]
    indptr = [ 0,  1,  2,  3,  4,  5,  6,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25,
       27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59,
       61, 63, 65, 67, 69, 71, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84]
    
    assert np.allclose(m1.data, data, atol=tol), \
        f"data for j_x[0]"
    assert np.array_equal(m1.indices, indices), \
        f"indices for j_x[0]"
    assert np.array_equal(m1.indptr, indptr), \
        f"indptr for j_x[0]"
        
    # j_x[1]
    
    m2 = q.j_x[1]
    
    data = [1.22474487+0.j, 1.22474487+0.j, 1.58113883+0.j, 1.58113883+0.j,
       1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j,
       1.58113883+0.j, 1.58113883+0.j, 1.22474487+0.j, 1.22474487+0.j,
       1.22474487+0.j, 1.22474487+0.j, 1.58113883+0.j, 1.58113883+0.j,
       1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j,
       1.58113883+0.j, 1.58113883+0.j, 1.22474487+0.j, 1.22474487+0.j,
       1.22474487+0.j, 1.22474487+0.j, 1.58113883+0.j, 1.58113883+0.j,
       1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j,
       1.58113883+0.j, 1.58113883+0.j, 1.22474487+0.j, 1.22474487+0.j,
       1.22474487+0.j, 1.22474487+0.j, 1.58113883+0.j, 1.58113883+0.j,
       1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j,
       1.58113883+0.j, 1.58113883+0.j, 1.22474487+0.j, 1.22474487+0.j,
       1.22474487+0.j, 1.22474487+0.j, 1.58113883+0.j, 1.58113883+0.j,
       1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j,
       1.58113883+0.j, 1.58113883+0.j, 1.22474487+0.j, 1.22474487+0.j,
       1.22474487+0.j, 1.22474487+0.j, 1.58113883+0.j, 1.58113883+0.j,
       1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j,
       1.58113883+0.j, 1.58113883+0.j, 1.22474487+0.j, 1.22474487+0.j,
       1.22474487+0.j, 1.22474487+0.j, 1.58113883+0.j, 1.58113883+0.j,
       1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j, 1.73205081+0.j,
       1.58113883+0.j, 1.58113883+0.j, 1.22474487+0.j, 1.22474487+0.j]
    indices = [ 1,  0,  2,  1,  3,  2,  4,  3,  5,  4,  6,  5,  8,  7,  9,  8, 10,
        9, 11, 10, 12, 11, 13, 12, 15, 14, 16, 15, 17, 16, 18, 17, 19, 18,
       20, 19, 22, 21, 23, 22, 24, 23, 25, 24, 26, 25, 27, 26, 29, 28, 30,
       29, 31, 30, 32, 31, 33, 32, 34, 33, 36, 35, 37, 36, 38, 37, 39, 38,
       40, 39, 41, 40, 43, 42, 44, 43, 45, 44, 46, 45, 47, 46, 48, 47]
    indptr = [ 0,  1,  3,  5,  7,  9, 11, 12, 13, 15, 17, 19, 21, 23, 24, 25, 27,
       29, 31, 33, 35, 36, 37, 39, 41, 43, 45, 47, 48, 49, 51, 53, 55, 57,
       59, 60, 61, 63, 65, 67, 69, 71, 72, 73, 75, 77, 79, 81, 83, 84]
    
    assert np.allclose(m2.data, data, atol=tol), \
        f"data for j_x[1]"
    assert np.array_equal(m2.indices, indices), \
        f"indices for j_x[1]"
    assert np.array_equal(m2.indptr, indptr), \
        f"indptr for j_x[1]"
        
    # j_y[0]
    
    m1 = q.j_y[0]
    
    data = [0.-1.22474487j, 0.-1.22474487j, 0.-1.22474487j, 0.-1.22474487j,
       0.-1.22474487j, 0.-1.22474487j, 0.-1.22474487j, 0.+1.22474487j,
       0.-1.58113883j, 0.+1.22474487j, 0.-1.58113883j, 0.+1.22474487j,
       0.-1.58113883j, 0.+1.22474487j, 0.-1.58113883j, 0.+1.22474487j,
       0.-1.58113883j, 0.+1.22474487j, 0.-1.58113883j, 0.+1.22474487j,
       0.-1.58113883j, 0.+1.58113883j, 0.-1.73205081j, 0.+1.58113883j,
       0.-1.73205081j, 0.+1.58113883j, 0.-1.73205081j, 0.+1.58113883j,
       0.-1.73205081j, 0.+1.58113883j, 0.-1.73205081j, 0.+1.58113883j,
       0.-1.73205081j, 0.+1.58113883j, 0.-1.73205081j, 0.+1.73205081j,
       0.-1.73205081j, 0.+1.73205081j, 0.-1.73205081j, 0.+1.73205081j,
       0.-1.73205081j, 0.+1.73205081j, 0.-1.73205081j, 0.+1.73205081j,
       0.-1.73205081j, 0.+1.73205081j, 0.-1.73205081j, 0.+1.73205081j,
       0.-1.73205081j, 0.+1.73205081j, 0.-1.58113883j, 0.+1.73205081j,
       0.-1.58113883j, 0.+1.73205081j, 0.-1.58113883j, 0.+1.73205081j,
       0.-1.58113883j, 0.+1.73205081j, 0.-1.58113883j, 0.+1.73205081j,
       0.-1.58113883j, 0.+1.73205081j, 0.-1.58113883j, 0.+1.58113883j,
       0.-1.22474487j, 0.+1.58113883j, 0.-1.22474487j, 0.+1.58113883j,
       0.-1.22474487j, 0.+1.58113883j, 0.-1.22474487j, 0.+1.58113883j,
       0.-1.22474487j, 0.+1.58113883j, 0.-1.22474487j, 0.+1.58113883j,
       0.-1.22474487j, 0.+1.22474487j, 0.+1.22474487j, 0.+1.22474487j,
       0.+1.22474487j, 0.+1.22474487j, 0.+1.22474487j, 0.+1.22474487j]
    indices = [ 7,  8,  9, 10, 11, 12, 13,  0, 14,  1, 15,  2, 16,  3, 17,  4, 18,
        5, 19,  6, 20,  7, 21,  8, 22,  9, 23, 10, 24, 11, 25, 12, 26, 13,
       27, 14, 28, 15, 29, 16, 30, 17, 31, 18, 32, 19, 33, 20, 34, 21, 35,
       22, 36, 23, 37, 24, 38, 25, 39, 26, 40, 27, 41, 28, 42, 29, 43, 30,
       44, 31, 45, 32, 46, 33, 47, 34, 48, 35, 36, 37, 38, 39, 40, 41]
    indptr = [ 0,  1,  2,  3,  4,  5,  6,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25,
       27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59,
       61, 63, 65, 67, 69, 71, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84]
    
    assert np.allclose(m1.data, data, atol=tol), \
        f"data for j_y[0]"
    assert np.array_equal(m1.indices, indices), \
        f"indices for j_y[0]"
    assert np.array_equal(m1.indptr, indptr), \
        f"indptr for j_y[0]"
        
    # j_y[1]
    
    m2 = q.j_y[1]
    
    data = [0.-1.22474487j, 0.+1.22474487j, 0.-1.58113883j, 0.+1.58113883j,
       0.-1.73205081j, 0.+1.73205081j, 0.-1.73205081j, 0.+1.73205081j,
       0.-1.58113883j, 0.+1.58113883j, 0.-1.22474487j, 0.+1.22474487j,
       0.-1.22474487j, 0.+1.22474487j, 0.-1.58113883j, 0.+1.58113883j,
       0.-1.73205081j, 0.+1.73205081j, 0.-1.73205081j, 0.+1.73205081j,
       0.-1.58113883j, 0.+1.58113883j, 0.-1.22474487j, 0.+1.22474487j,
       0.-1.22474487j, 0.+1.22474487j, 0.-1.58113883j, 0.+1.58113883j,
       0.-1.73205081j, 0.+1.73205081j, 0.-1.73205081j, 0.+1.73205081j,
       0.-1.58113883j, 0.+1.58113883j, 0.-1.22474487j, 0.+1.22474487j,
       0.-1.22474487j, 0.+1.22474487j, 0.-1.58113883j, 0.+1.58113883j,
       0.-1.73205081j, 0.+1.73205081j, 0.-1.73205081j, 0.+1.73205081j,
       0.-1.58113883j, 0.+1.58113883j, 0.-1.22474487j, 0.+1.22474487j,
       0.-1.22474487j, 0.+1.22474487j, 0.-1.58113883j, 0.+1.58113883j,
       0.-1.73205081j, 0.+1.73205081j, 0.-1.73205081j, 0.+1.73205081j,
       0.-1.58113883j, 0.+1.58113883j, 0.-1.22474487j, 0.+1.22474487j,
       0.-1.22474487j, 0.+1.22474487j, 0.-1.58113883j, 0.+1.58113883j,
       0.-1.73205081j, 0.+1.73205081j, 0.-1.73205081j, 0.+1.73205081j,
       0.-1.58113883j, 0.+1.58113883j, 0.-1.22474487j, 0.+1.22474487j,
       0.-1.22474487j, 0.+1.22474487j, 0.-1.58113883j, 0.+1.58113883j,
       0.-1.73205081j, 0.+1.73205081j, 0.-1.73205081j, 0.+1.73205081j,
       0.-1.58113883j, 0.+1.58113883j, 0.-1.22474487j, 0.+1.22474487j]
    indices = [ 1,  0,  2,  1,  3,  2,  4,  3,  5,  4,  6,  5,  8,  7,  9,  8, 10,
        9, 11, 10, 12, 11, 13, 12, 15, 14, 16, 15, 17, 16, 18, 17, 19, 18,
       20, 19, 22, 21, 23, 22, 24, 23, 25, 24, 26, 25, 27, 26, 29, 28, 30,
       29, 31, 30, 32, 31, 33, 32, 34, 33, 36, 35, 37, 36, 38, 37, 39, 38,
       40, 39, 41, 40, 43, 42, 44, 43, 45, 44, 46, 45, 47, 46, 48, 47]
    indptr = [ 0,  1,  3,  5,  7,  9, 11, 12, 13, 15, 17, 19, 21, 23, 24, 25, 27,
       29, 31, 33, 35, 36, 37, 39, 41, 43, 45, 47, 48, 49, 51, 53, 55, 57,
       59, 60, 61, 63, 65, 67, 69, 71, 72, 73, 75, 77, 79, 81, 83, 84]
    
    assert np.allclose(m2.data, data, atol=tol), \
        f"data for j_y[1]"
    assert np.array_equal(m2.indices, indices), \
        f"indices for j_y[1]"
    assert np.array_equal(m2.indptr, indptr), \
        f"indptr for j_y[1]"
        
    # j_z[0]
    
    m1 = q.j_z[0]
    
    data = [-3.+0.j, -3.+0.j, -3.+0.j, -3.+0.j, -3.+0.j, -3.+0.j, -3.+0.j,
       -2.+0.j, -2.+0.j, -2.+0.j, -2.+0.j, -2.+0.j, -2.+0.j, -2.+0.j,
       -1.+0.j, -1.+0.j, -1.+0.j, -1.+0.j, -1.+0.j, -1.+0.j, -1.+0.j,
        1.+0.j,  1.+0.j,  1.+0.j,  1.+0.j,  1.+0.j,  1.+0.j,  1.+0.j,
        2.+0.j,  2.+0.j,  2.+0.j,  2.+0.j,  2.+0.j,  2.+0.j,  2.+0.j,
        3.+0.j,  3.+0.j,  3.+0.j,  3.+0.j,  3.+0.j,  3.+0.j,  3.+0.j]
    indices = [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
       41, 42, 43, 44, 45, 46, 47, 48]
    indptr = [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 21, 21, 21, 21, 21, 21, 21, 22, 23, 24, 25, 26,
       27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]
    
    assert np.allclose(m1.data, data, atol=tol), \
        f"data for j_z[0]"
    assert np.array_equal(m1.indices, indices), \
        f"indices for j_z[0]"
    assert np.array_equal(m1.indptr, indptr), \
        f"indptr for j_z[0]"
        
    # j_z[1]
    
    m2 = q.j_z[1]
    
    data = [-3.+0.j, -2.+0.j, -1.+0.j,  1.+0.j,  2.+0.j,  3.+0.j, -3.+0.j,
       -2.+0.j, -1.+0.j,  1.+0.j,  2.+0.j,  3.+0.j, -3.+0.j, -2.+0.j,
       -1.+0.j,  1.+0.j,  2.+0.j,  3.+0.j, -3.+0.j, -2.+0.j, -1.+0.j,
        1.+0.j,  2.+0.j,  3.+0.j, -3.+0.j, -2.+0.j, -1.+0.j,  1.+0.j,
        2.+0.j,  3.+0.j, -3.+0.j, -2.+0.j, -1.+0.j,  1.+0.j,  2.+0.j,
        3.+0.j, -3.+0.j, -2.+0.j, -1.+0.j,  1.+0.j,  2.+0.j,  3.+0.j]
    indices = [ 0,  1,  2,  4,  5,  6,  7,  8,  9, 11, 12, 13, 14, 15, 16, 18, 19,
       20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39,
       40, 41, 42, 43, 44, 46, 47, 48]
    indptr = [ 0,  1,  2,  3,  3,  4,  5,  6,  7,  8,  9,  9, 10, 11, 12, 13, 14,
       15, 15, 16, 17, 18, 19, 20, 21, 21, 22, 23, 24, 25, 26, 27, 27, 28,
       29, 30, 31, 32, 33, 33, 34, 35, 36, 37, 38, 39, 39, 40, 41, 42]
    
    assert np.allclose(m2.data, data, atol=tol), \
        f"data for j_z[1]"
    assert np.array_equal(m2.indices, indices), \
        f"indices for j_z[1]"
    assert np.array_equal(m2.indptr, indptr), \
        f"indptr for j_z[1]"